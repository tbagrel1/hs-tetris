-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/tbagrel1/hs-tetris#readme</a>
@package hs-tetris
@version 0.1.0


module Coords

-- | Type alias for rational coordinates
type RatCoord = (Rational, Rational)

-- | Type alias for integer coordinates
type IntCoord = (Int, Int)

-- | Translates the first point using the second one as a movement vector.
addCoord :: Num a => (a, a) -> (a, a) -> (a, a)

-- | Rounds the point coordinates to the nearest integers to give a
--   IntCoord
toIntCoord :: RatCoord -> IntCoord


module Game

-- | Type alias representing the key mapping used by the game
type KeyMapping = Key -> Maybe ActionType

-- | Either an in-game move action, or a control action (play, pause,
--   reset...)
data ActionType
Move :: MoveType -> ActionType
Control :: ControlType -> ActionType

-- | All possible moves in the game
data MoveType

-- | Counter-clockwise rotation
RotateLeft :: MoveType

-- | Clockwise rotation
RotateRight :: MoveType

-- | Move down (1 step)
MoveDown :: MoveType

-- | Move left (1 step)
MoveLeft :: MoveType

-- | Move right (1 step)
MoveRight :: MoveType

-- | Move down (as much as possible)
FullDrop :: MoveType

-- | All control actions (not related to in-game movement)
data ControlType

-- | Pause or resume the current game
PauseResume :: ControlType

-- | Reset the game
Reset :: ControlType

-- | Controls the update rate of the game screen and data
ticksPerSecond :: Int

-- | Controls the speed at which pieces fall at the beginning of the game
initialSpeed :: Float

-- | Computes the interval between two drop ticks using ticksPerSecond and
--   the current speed
dropTickInterval :: Float -> Int

-- | Number of rows in the grid that the player can actually use
playableRowNb :: Int

-- | Number of rows in the grid including the two where pieces spawn
totalRowNb :: Int

-- | Number of columns in the grid
colNb :: Int

-- | Tells whether a 2D-point is in the playable part of the grid or not
isInPlayableGrid :: IntCoord -> Bool

-- | Tells whether a 2D-point is in the grid, including the spawn zone, or
--   not.
isInTotalGrid :: IntCoord -> Bool

-- | Tells whether a 2D-point is in the grid and its vertical extension, or
--   not.
isInGridOrAbove :: IntCoord -> Bool

-- | Default key mapping, based on FPS controls
defaultKeyMapping :: KeyMapping
instance GHC.Show.Show Game.MoveType
instance GHC.Classes.Eq Game.MoveType


module Utils

-- | Extract the head of the list if there is some.
headMaybe :: [a] -> Maybe a

-- | Extract the last element of the list if there is some.
lastMaybe :: [a] -> Maybe a

-- | Drops the values from the list whose index does not satisfy the given
--   predicate.
indexFilter :: (Int -> Bool) -> [a] -> [a]


module Grid

-- | Type alias for the row-based grid
type Grid a = Vector (Vector a)

-- | Implements 2D indexing for grid. Fails if the 2D index is out of
--   bounds.
(!!!) :: Grid a -> IntCoord -> a
infixl 9 !!!

-- | When the grid is composed of Maybe values, returns the indices of rows
--   which only contain Just values.
fullRows :: Grid (Maybe a) -> [Int]

-- | Removes the rows whose indices are given, push the other rows closer
--   to the bottom of the grid, and complete the grid with new rows at the
--   top, created using the specified default value.
deleteRows :: Grid a -> [Int] -> a -> Grid a

-- | Updates the given grid using the (2D-index, value) pairs.
update :: Grid a -> [(IntCoord, a)] -> Grid a

-- | Applies the specified function to each cell of the grid. (I could not
--   implement <a>fmap</a> for 'Grid a' because 'Grid a' is only a type
--   alias)
mapGrid :: (a -> b) -> Grid a -> Grid b

-- | Applies the specified function to each pair (2D-index, value) of the
--   grid, and collects all the results in a list.
lMapGrid :: (IntCoord -> a -> b) -> Grid a -> [b]


module Pieces

-- | Represents the four orientations a piece can take in Tetris
data Orientation

-- | Initial state, horizontal (for most pieces)
S0 :: Orientation

-- | After 1 clockwise rotation action
S1 :: Orientation

-- | After 2 rotation actions
S2 :: Orientation

-- | After 3 clockwise rotation actions
S3 :: Orientation

-- | Tetrominos types
data PieceType
I :: PieceType
J :: PieceType
L :: PieceType
O :: PieceType
S :: PieceType
T :: PieceType
Z :: PieceType

-- | The moving piece (i.e. one which is still falling) is defined by its
--   type, orientation and center of rotation
data MovingPiece
MovingPiece :: PieceType -> Orientation -> RatCoord -> MovingPiece

-- | Type of tetromino
[pieceType] :: MovingPiece -> PieceType

-- | Current orientation of the piece
[orientation] :: MovingPiece -> Orientation

-- | Center of rotation of this piece. Can be a rational point (we consider
--   that the center of each grid cell has integer coordinates, so the
--   borders/corners of cells have rational coordinates)
[center] :: MovingPiece -> RatCoord

-- | Type alias for a grid in which each cell can contain a colored square
--   or be empty.
type PieceGrid = Grid (Maybe PieceType)

-- | Generates a list of piece types where each type appears only one (but
--   in a random order).
generatePieceBag :: IO [PieceType]

-- | Creates a new moving piece using the specified type.
spawnPiece :: PieceType -> MovingPiece

-- | Given the grid, the current moving piece and the move type requested
--   by the user, returns a moving piece with its orientation and position
--   updated, if the move is possible.
applyMove :: PieceGrid -> MovingPiece -> MoveType -> Maybe MovingPiece

-- | When a moving piece has finished falling, this function transforms it
--   into colored square cells in the grid.
solidifyPiece :: PieceGrid -> MovingPiece -> PieceGrid

-- | Returns the grid cells on which the moving piece must be shown.
selfRepr :: MovingPiece -> [IntCoord]

-- | Returns the grid cells on which the "ghost" (i.e. the ground
--   projection) of the moving piece must be shown.
ghostRepr :: PieceGrid -> MovingPiece -> [IntCoord]

-- | Tells whether a moving piece position is valid or not: + all its
--   squares must be in the grid or its vertical extension + the squares
--   must not overlap an already solidified colored square in the grid
isValid :: PieceGrid -> MovingPiece -> Bool
instance GHC.Show.Show Pieces.Orientation
instance GHC.Classes.Eq Pieces.Orientation
instance GHC.Show.Show Pieces.PieceType
instance GHC.Classes.Eq Pieces.PieceType
instance GHC.Show.Show Pieces.MovingPiece
instance GHC.Classes.Eq Pieces.MovingPiece


module World

-- | Represents the game state
data World
World :: KeyMapping -> PieceGrid -> MovingPiece -> [PieceType] -> [Int] -> Float -> Integer -> Integer -> Bool -> Bool -> Int -> World

-- | Mapping from keyboard keys to game actions
[keyMapping] :: World -> KeyMapping

-- | Grid of solidified pieces (i.e. pieces which are no longer falling)
[grid] :: World -> PieceGrid

-- | The tetromino which is currently falling
[movingPiece] :: World -> MovingPiece

-- | Next piece types to spawn
[pieceBag] :: World -> [PieceType]

-- | Completed rows, which will be deleted next tick
[rowsToDelete] :: World -> [Int]

-- | Current speed of the game. Determines the tick interval between two
--   "gravity" moves
[currentSpeed] :: World -> Float

-- | Tick count
[tickNo] :: World -> Integer

-- | Tick number where the next "gravity" move will happen
[tickNextDrop] :: World -> Integer

-- | Is the game paused?
[paused] :: World -> Bool

-- | Is the game over?
[finished] :: World -> Bool

-- | Number of complete rows cleared by the player
[rowsCleared] :: World -> Int

-- | Creates the initial game state (using the specified key mapping).
makeInitialWorld :: KeyMapping -> IO World

-- | Updates the game state when an event is issued.
updateWorldWithEvent :: Event -> World -> IO World

-- | Updates the game state when a tick is elapsed
updateWorldWithTick :: Float -> World -> IO World


module Render

-- | Background color of the window.
backgroundColor :: Color

-- | Grid width (without margin), in pixels
gridWidth :: Int

-- | Grid height (without margin), in pixels
gridHeight :: Int

-- | Adds grid margin size to a grid dimension.
withMargin :: Int -> Int

-- | Get the graphical representation corresponding to the current game
--   state.
renderWorld :: World -> IO Picture
